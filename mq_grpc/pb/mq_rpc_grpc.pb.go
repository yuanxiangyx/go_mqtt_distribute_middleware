// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.20.1
// source: mq_rpc.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MqGreeterRpcService_SendMqMessage_FullMethodName = "/mq_grpc.MqGreeterRpcService/SendMqMessage"
)

// MqGreeterRpcServiceClient is the client API for MqGreeterRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MqGreeterRpcServiceClient interface {
	SendMqMessage(ctx context.Context, in *MqRpcRequest, opts ...grpc.CallOption) (*MqRpcResponse, error)
}

type mqGreeterRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMqGreeterRpcServiceClient(cc grpc.ClientConnInterface) MqGreeterRpcServiceClient {
	return &mqGreeterRpcServiceClient{cc}
}

func (c *mqGreeterRpcServiceClient) SendMqMessage(ctx context.Context, in *MqRpcRequest, opts ...grpc.CallOption) (*MqRpcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MqRpcResponse)
	err := c.cc.Invoke(ctx, MqGreeterRpcService_SendMqMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MqGreeterRpcServiceServer is the server API for MqGreeterRpcService service.
// All implementations must embed UnimplementedMqGreeterRpcServiceServer
// for forward compatibility
type MqGreeterRpcServiceServer interface {
	SendMqMessage(context.Context, *MqRpcRequest) (*MqRpcResponse, error)
	mustEmbedUnimplementedMqGreeterRpcServiceServer()
}

// UnimplementedMqGreeterRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMqGreeterRpcServiceServer struct {
}

func (UnimplementedMqGreeterRpcServiceServer) SendMqMessage(context.Context, *MqRpcRequest) (*MqRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMqMessage not implemented")
}
func (UnimplementedMqGreeterRpcServiceServer) mustEmbedUnimplementedMqGreeterRpcServiceServer() {}

// UnsafeMqGreeterRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MqGreeterRpcServiceServer will
// result in compilation errors.
type UnsafeMqGreeterRpcServiceServer interface {
	mustEmbedUnimplementedMqGreeterRpcServiceServer()
}

func RegisterMqGreeterRpcServiceServer(s grpc.ServiceRegistrar, srv MqGreeterRpcServiceServer) {
	s.RegisterService(&MqGreeterRpcService_ServiceDesc, srv)
}

func _MqGreeterRpcService_SendMqMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MqRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqGreeterRpcServiceServer).SendMqMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MqGreeterRpcService_SendMqMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqGreeterRpcServiceServer).SendMqMessage(ctx, req.(*MqRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MqGreeterRpcService_ServiceDesc is the grpc.ServiceDesc for MqGreeterRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MqGreeterRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mq_grpc.MqGreeterRpcService",
	HandlerType: (*MqGreeterRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMqMessage",
			Handler:    _MqGreeterRpcService_SendMqMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mq_rpc.proto",
}
